<section id="main_header" data-vide-bg="assets/cables.mp4"
         data-vide-options="loop: true, muted: true, position: 50% 50%">

    <div>
        <h1 class="page-header text-center">RFID Analysis Warehouse</h1>

        <button id="about_button" class="btn-lg btn-primary center-block">
            <span class="lead">Click here to know more</span>
        </button>
    </div>

</section>

<section id="about_section">

    <div class="container">
        <div class="row">

            <div class="col-md-4">
                <h1 class="text-center icon_adjust"><span class="fa fa-clock-o"></span></h1>
                <h1 class="text-center"><strong>Peak Times Analysis</strong></h1>
                <h4 class="text-center">
                    Our program can calculate the peak traffic hours of the given RFID data set. In our case, the given
                    data set was that of a conference.
                </h4>
            </div>

            <div class="col-md-4">
                <h1 class="text-center icon_adjust"><span class="fa fa-users"></span></h1>
                <h1 class="text-center"><strong>Crowd/Swarm Analysis</strong></h1>
                <h4 class="text-center">
                    Analyze which areas are the crowdest throughout the day whether it be halls, meeting rooms or the
                    phone booth.
                </h4>
            </div>

            <div class="col-md-4">
                <h1 class="text-center icon_adjust"><span class="fa fa-microphone"></span></h1>
                <h1 class="text-center"><strong>Popularity/Ratings Analysis</strong></h1>
                <h4 class="text-center">
                    Find out which speech (talk) of the event was the most popular. Remember, good speakers are hard
                    to come by!
                </h4>
            </div>

        </div>
    </div>

</section>

<section id="file_chooser">
    <div class="container">

        <h2 class="text-center">Choose file to process</h2>

        <div class="text-center">
			<form class="form-inline">
				<select class="form-control" name="statistic_type" id="statistic_type">
				    <option disabled selected value="TEST STATISTIC">Choose Statistic</option>
				    <option value="peakhours">Peak Hours</option>
					<option value="crowdedarea">CrowdedArea</option>
					<option value="popularspeech">Peak Hours</option>
				</select>
			    <span id="file_form" style="display: none;">
				    <div class="form-group">
						<input class="btn btn-primary" type="file" id="files" name="files"/>
				    </div>
			    </span>
			</form>
        </div>

        <div id="file_dragger" style="display: none;">
	        <h2 class="text-center">Or drag a file in the area below ...</h2>
	        <div id="drop_zone">
	            <h2 class="text-center">Drag here!</h2>
	        </div>
        </div>

      <div id="output"></div>
      <output id="list"></output>
    </div>
</section>

<section id="file_results">
    <div class="container-fluid">
        <h1 class="page-header text-center"><span class="fa fa-bar-chart-o"></span> Analysis Results</h1>
        <div id="chart_results"></div>
    </div>
</section>


<script type="text/javascript">

	var websocket;
	var chart;
	var chartUpdateFunction;
    // When the document loads, run the main page logic function.
    $(document).ready(mainPageLogic);

	function mainPageLogic()
	{
		$('#about_button').click(function(){
			$('html,body').animate({scrollTop: $('#about_section').offset().top},1000);
		});
		$("#statistic_type").change(function()
        {
	        var selectMenu = $("#statistic_type");
	        var statistic = selectMenu.val();
			// Create the JavaScript Web Socket
			websocket = new WebSocket("ws://localhost:8080");
			// Error socket event function
			websocket.onerror = function(evt){onError(evt)};
			// Open socket event function
			websocket.onopen = function(){onOpen()};
			// Message received socket event function
			websocket.onmessage = function(evt){onMessage(evt)};

	        $("#file_form").fadeIn("1000");
	        $("#file_dragger").fadeIn("1000");
	        selectMenu.attr("disabled",true);

			switch (statistic)
			{
				case "peakhours":
					peakTimeAnalysis();
					chartUpdateFunction = peakTimeChartUpdate;
					break;
				case "crowdedarea":
					crowdAnalysis();
					chartUpdateFunction = crowdChartUpdate;
					break;
				case "popularspeech":
					popularityAnalysis();
					break;
			}
		});
	}

	/**
	 * This function updates the peakTime chart.
	 **/
	function peakTimeChartUpdate(data)
	{
		// Get the chart object.
		var chartObject = chart;
		var dataArray = data.split("##");

		// Get the data point from the array.
        var dataPoint = {id: dataArray[0], value: dataArray[1]};

        if(dataPoint)
        {
            var id = dataPoint.id;
            var value = Number(dataPoint.value);


            var day = id.split("-")[0];
            var hour = Number(id.split("-")[1]);

	        // The series is id'ed by the day.
            var series = chartObject.get(day);

            // Series exists
            if(series)
            {
	            // Get the point with the same id.
	            var point = chartObject.get(id);

	            // If point exists then update it. Else add a new point
	            if(point)
	            {
		            // Update the y value of the point to be the new value.
		            point.update(value);
	            }
	            else
	            {
		            // Add a new point to the given series.
		            series.addPoint({x:hour, y:value, id: id})
	            }
            }
            else
            {
	            console.log("New Series");
	            // Create a new series object with the name and id as the day. Add the first point.
	            series = chartObject.addSeries({
		            name: day,
		            id: day,
		            data: [{x:hour, y:value, id: id}]
	            });
            }
        }
	}

	function crowdChartUpdate(data)
	{
		var sparkData = [{id:'Lobby',value:2},{id:'PhoneBooth',value:4},{id:'ConferenceRoom',value:7},
		                 {id:'Lobby',value:4},{id:'PhoneBooth',value:10},{id:'ConferenceRoom',value:8}];

		// Get the chart object.
		var chartObject = chart;
		// Format: Area##People
		var dataArray = data.split("##");

        // Get the data point from the array.
        var dataPoint = {id: dataArray[0], value: dataArray[1]};

        if(dataPoint)
        {
            var id = dataPoint.id;
            var value = Number(dataPoint.value);

            var series = chartObject.series[0];

            if(series)
            {
	            // Get the point with the same id.
	            var point = chartObject.get(id);

	            // If point exists then update it. Else add a new point
	            if (point)
	            {
		            // Update the y value of the point to be the new value.
		            point.update(value);
	            }
	            else
	            {
		            // Add a new point to the given series.
		            series.addPoint({name: id, y: value, id: id})
	            }
            }
            else
            {
	            series = chartObject.addSeries({name: 'Locations'});
            }
        }
	}

	function peakTimeAnalysis()
	{
		$('#chart_results').highcharts({
			chart:
			{
				type: 'spline',
				height: 600,
				marginTop: 50,
				marginBottom: 80
			},

			title: {text: 'Peak Time Analysis'},

			xAxis: {type: 'linear', min: 0, max: 23},

			yAxis:
			{
				title: {text: 'Number of People'},
				plotLines: [{value: 0, width: 1, color: '#808080'}]
			},

			tooltip: {
				formatter: function(){
					return '<b>' + this.series.name + '</b><br/>' + "Hour: " + this.x + ":00 - " + "People: " + this.y;
				}
			}
		});

		chart = $('#chart_results').highcharts();
	}

    function crowdAnalysis()
    {
	    chart = $('#chart_results').highcharts({
		    chart:
		    {
			    type: 'column',
			    height: 600,
			    marginTop: 50,
			    marginBottom: 80
		    },

		    title: {text: 'Crowd Analysis'},

		    xAxis: {type: 'category'},

		    yAxis:
		    {
			    title: {text: 'Number of People'},
			    plotLines: [{value: 0, width: 1, color: '#808080'}]
		    },

		    tooltip:
		    {
			    formatter: function(){
				    return '<b>' + this.series.name + '</b><br/>' + "People Count: " + this.y;
			    }
		    },

		    series: []
	    });

	    chart = $('#chart_results').highcharts();
    }

	function popularityAnalysis()
	{
		var sparkData = [{id:'BigData',value:2},{id:'Trees',value:4},{id:'Awesomeness',value:7},
		                 {id:'BigData',value:4},{id:'Trees',value:10},{id:'Awesomeness',value:8}];

		chart = $('#chart_results').highcharts({
			chart:
			{
				type: 'column',
				height: 600,
				marginTop: 50,
				marginBottom: 80,
				events:
				{
					load: function ()
					{
						// Get the chart object.
						var chartObject = this;

						// Update the chart every second. Will be changed to web-socket later.
						setInterval(function ()
			            {
				            // Get the data point from the array.
				            var dataPoint = sparkData.shift();
				            if(dataPoint)
				            {
					            var id = dataPoint.id;
					            var value = dataPoint.value;

					            var series = chartObject.series[0];

					            if(series) {
						            // Get the point with the same id.
						            var point = chartObject.get(id);

						            // If point exists then update it. Else add a new point
						            if (point) {
							            // Update the y value of the point to be the new value.
							            point.update(value);
						            }
						            else {
							            // Add a new point to the given series.
							            series.addPoint({name: id, y: value, id: id})
						            }
					            }
					            else
					            {
						            series = chartObject.addSeries({name: 'Talks'});
					            }
				            }

			            }, 1000);
					}
				}
			},

			title: {text: 'Talk Popularity Analysis'},

			xAxis: {type: 'category'},

			yAxis:
			{
				title: {text: 'Number of People'},
				plotLines: [{value: 0, width: 1, color: '#808080'}]
			},

			tooltip:
			{
				formatter: function(){
					return '<b>' + this.series.name + '</b><br/>' + "People Count: " + this.y;
				}
			},

			series: []
		});
	}

    // Web Socket , File Transfer , Drag & Drop

    // Temporary div to show the output
    var output = document.getElementById("output");

    // function to write to the output div
    function writeToScreen(message)
    {
        output.innerHTML += message + "<br>";
    }

    function onError(evt)
    {
        console.error(evt.data);
    }

	/**
	 * This function sends the statistic type to the server on the open of the web socket.
	 */
	function onOpen()
	{
		console.log("Web socket is open!");
        sendText("method::"+$("#statistic_type").val());
    }

	/**
	 * This function is fired when a message is received from the websocket. This message will most probably the data.
	 * @param evt
	 */
    function onMessage(evt)
	{
        console.log("Received: " + evt.data);
		chartUpdateFunction(evt.data);
    }

    // Send text to the server socket
    function sendText(message)
    {
        websocket.send(message);
    }

    //////
    function handleFileSelect(evt) {
        evt.stopPropagation();
        evt.preventDefault();

        var f;

        if (evt.type == "drop")
            f = evt.dataTransfer.files[0]; // FileList object.
        else
            f = evt.target.files[0]; // FileList object

        // files is a FileList of File objects. List some properties.
        var output = [];

        var fr = new FileReader();

        fr.onload = function ()
        {
            // 'this' references 'fr', our 'FileReader' instance
            var fileContents = this.result;

            var lines = fileContents.split('\n');

            for(var line = 0; line < lines.length; line++)
            {
                sendText(lines[line]);
            }

	        sendText("0101");
        };

        fr.readAsText( f );
    }

    // To handle the dragging of file over the drop zone div
    function handleDragOver(evt) {
        evt.stopPropagation();
        evt.preventDefault();
        evt.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.
    }

    // Setup the dnd listeners and the input file listener.
    var dropZone = document.getElementById('drop_zone');
    dropZone.addEventListener('dragover', handleDragOver, false);
    dropZone.addEventListener('drop', handleFileSelect, false);

    document.getElementById('files').addEventListener('change', handleFileSelect, false);

</script>